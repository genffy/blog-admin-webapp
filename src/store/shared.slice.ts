import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from 'types/store';
import { SharedStore, User } from "types/shared";
import { getSysOptions } from 'api/sys';
import { current } from 'api/user';

const initialState: SharedStore = {
  getCategoryList$: [],
  getDefaultCategory$: [],
  defaultCategory: '',
  categoryList: [],
  userList:[],
  templateList:[],
  pageList: [],
  tagList: [],
  loading: {
    category: false,
    tag: false,
    page: false,
  },
  userInfo: {},
};


export const sysOptions = createAsyncThunk(
  'shared/options',
  async () => {
    const { data: res} = await getSysOptions();
    // The value we return becomes the `fulfilled` action payload
    if (res.errno === 0) {
      window.SysConfig.options = res.data;
    }
    return res.data;
  }
);

// 
export const getCurrent = createAsyncThunk(
  'shared/current',
  async () => {
    const { data: res} = await current();
    // The value we return becomes the `fulfilled` action payload
    if (res.errno === 0) {
      window.SysConfig.options = res.data;
      return res.data;
    }
    return {};
  }
);

export const sharedSlice = createSlice({
  name: 'shared',
  initialState,
  reducers: {
    updateUserInfo: (state, action: PayloadAction<User>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.userInfo = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCurrent.fulfilled, (state, action) => {
        state.userInfo = action.payload;
      });
  },
});
// export const selectUserInfo = (state: RootState) => state.shared.userInfo;
// export const { updateUserInfo } = sharedSlice.actions;
export default sharedSlice.reducer;